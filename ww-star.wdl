## WILDS WDL for performing RNA-seq alignment using STAR's two-pass methodology.
## Designed to be a modular component within the WILDS ecosystem that can be used
## independently or integrated with other WILDS workflows.

version 1.0

struct SampleInfo {
    String name
    File r1
    File r2
}

struct RefGenome {
    String name
    File fasta
    File gtf
}

workflow star_example {
  meta {
    author: "Taylor Firman"
    email: "tfirman@fredhutch.org"
    description: "WDL workflow for RNA-seq alignment via STAR"
    url: "https://github.com/getwilds/ww-star"
    outputs: {
        star_bam: "STAR alignment output BAM files for each sample",
        star_bai: "Index files for the STAR alignment BAM files",
        star_gene_counts: "Gene count files generated by STAR for each sample",
        star_log_final: "Final log files from STAR alignment for each sample",
        star_log_progress: "Progress log files from STAR alignment for each sample",
        star_log: "Main log files from STAR alignment for each sample",
        star_sj: "Splice junction files from STAR alignment for each sample"
    }
  }

  parameter_meta {
    samples: "List of sample objects, each containing name, r1/r2 fastq files, and condition information"
    reference_genome: "Reference genome object containing name, fasta, and gtf files"
    sjdb_overhang: "Length of the genomic sequence around the annotated junction to be used in constructing the splice junctions database"
    genome_sa_index_nbases: "Length (bases) of the SA pre-indexing string, typically between 10-15 (scales with genome size)"
    cpus: "Number of CPU cores allocated for each task in the workflow"
    memory_gb: "Memory allocated for each task in the workflow in GB"
  }

  input {
    Array[SampleInfo] samples
    RefGenome reference_genome
    Int sjdb_overhang = 100
    Int genome_sa_index_nbases = 14
    Int cpus = 8
    Int memory_gb = 64
  }

  call build_star_index { input:
      reference_fasta = reference_genome.fasta,
      reference_gtf = reference_genome.gtf,
      sjdb_overhang = sjdb_overhang,
      genome_sa_index_nbases = genome_sa_index_nbases,
      memory_gb = memory_gb,
      cpu_cores = cpus
  }

  scatter (sample in samples) {
    call star_align_two_pass { input:
        sample_data = sample,
        star_genome_tar = build_star_index.star_index_tar,
        ref_genome_name = reference_genome.name,
        sjdb_overhang = sjdb_overhang,
        memory_gb = memory_gb,
        cpu_cores = cpus
    }
  }

  output {
    Array[File] star_bam = star_align_two_pass.bam
    Array[File] star_bai = star_align_two_pass.bai
    Array[File] star_gene_counts = star_align_two_pass.gene_counts
    Array[File] star_log_final = star_align_two_pass.log_final
    Array[File] star_log_progress = star_align_two_pass.log_progress
    Array[File] star_log = star_align_two_pass.log
    Array[File] star_sj = star_align_two_pass.sj_out
  }
}

task build_star_index {
  meta {
    description: "Task for building the STAR index files from fasta/gtf."
    outputs: {
        star_index_tar: "Compressed tarball containing the STAR genome index for future alignment steps"
    }
  }

  parameter_meta {
    reference_fasta: "Reference genome FASTA file"
    reference_gtf: "Reference genome GTF annotation file"
    sjdb_overhang: "Length of the genomic sequence around the annotated junction to be used in constructing the splice junctions database"
    genome_sa_index_nbases: "Length (bases) of the SA pre-indexing string, typically between 10-15 (scales with genome size)"
    memory_gb: "Memory allocated for the task in GB"
    cpu_cores: "Number of CPU cores allocated for the task"
  }

  input {
    File reference_fasta
    File reference_gtf
    Int sjdb_overhang = 100
    Int genome_sa_index_nbases = 14
    Int memory_gb = 64
    Int cpu_cores = 8
  }

  command <<<
    set -eo pipefail
    
    mkdir star_index

    echo "Building STAR index..."
    STAR \
      --runMode genomeGenerate \
      --runThreadN ~{cpu_cores} \
      --genomeDir star_index \
      --genomeFastaFiles "~{reference_fasta}" \
      --sjdbGTFfile "~{reference_gtf}" \
      --sjdbOverhang ~{sjdb_overhang} \
      --genomeSAindexNbases ~{genome_sa_index_nbases}

    tar -czf star_index.tar.gz star_index/*
  >>>

  output {
    File star_index_tar = "star_index.tar.gz"
  }

  runtime {
    docker: "getwilds/star:2.7.6a"
    memory: "~{memory_gb} GB"
    cpu: cpu_cores
  }
}

task star_align_two_pass {
  meta {
    description: "Task for aligning RNA-seq reads using STAR's two-pass technique."
    outputs: {
        name: "Sample name extracted from the input sample_data",
        bam: "Aligned reads in sorted BAM format",
        bai: "Index file for the aligned BAM file",
        gene_counts: "Gene-level read counts generated by STAR",
        log_final: "Final summary log of the STAR alignment process",
        log_progress: "Progress log containing time and resource usage during alignment",
        log: "Main log file from STAR containing detailed alignment information",
        sj_out: "Splice junction file with coordinates of detected splice junctions"
    }
  }

  parameter_meta {
    star_genome_tar: "Compressed tarball containing STAR genome index"
    sample_data: "Sample information including name, input fastq files, and experimental condition"
    ref_genome_name: "Reference genome name to include in output filenames"
    sjdb_overhang: "Length of the genomic sequence around the annotated junction"
    memory_gb: "Memory allocated for the task in GB"
    cpu_cores: "Total number of CPU cores allocated for the task"
    star_threads: "Number of threads to use for STAR alignment (subset of cpu_cores)"
  }

  input {
    File star_genome_tar
    SampleInfo sample_data
    String ref_genome_name
    Int sjdb_overhang = 100
    Int memory_gb = 62
    Int cpu_cores = 8
    Int star_threads = 6
  }

  command <<<
    set -eo pipefail

    echo "Extracting STAR reference..."
    tar -xvf "~{star_genome_tar}"

    echo "Starting STAR alignment..."
    STAR \
      --genomeDir star_index \
      --readFilesIn "~{sample_data.r1}" "~{sample_data.r2}" \
      --runThreadN ~{star_threads} \
      --readFilesCommand zcat \
      --sjdbOverhang ~{sjdb_overhang} \
      --outSAMtype BAM SortedByCoordinate \
      --twopassMode Basic \
      --outTmpDir _STARtmp \
      --outFileNamePrefix "./" \
      --quantMode GeneCounts \
      --quantTranscriptomeBAMcompression 5 

    rm -r star_index

    mv Aligned.sortedByCoord.out.bam \
      "~{sample_data.name}.~{ref_genome_name}.Aligned.sortedByCoord.out.bam"
    mv ReadsPerGene.out.tab "~{sample_data.name}.~{ref_genome_name}.ReadsPerGene.out.tab"
    mv Log.final.out "~{sample_data.name}.~{ref_genome_name}.Log.final.out"
    mv Log.progress.out "~{sample_data.name}.~{ref_genome_name}.Log.progress.out"
    mv Log.out "~{sample_data.name}.~{ref_genome_name}.Log.out"
    mv SJ.out.tab "~{sample_data.name}.~{ref_genome_name}.SJ.out.tab"

    samtools index "~{sample_data.name}.~{ref_genome_name}.Aligned.sortedByCoord.out.bam"
  >>>

  output {
    String name = sample_data.name
    File bam = "~{sample_data.name}.~{ref_genome_name}.Aligned.sortedByCoord.out.bam"
    File bai = "~{sample_data.name}.~{ref_genome_name}.Aligned.sortedByCoord.out.bam.bai"
    File gene_counts = "~{sample_data.name}.~{ref_genome_name}.ReadsPerGene.out.tab"
    File log_final = "~{sample_data.name}.~{ref_genome_name}.Log.final.out"
    File log_progress = "~{sample_data.name}.~{ref_genome_name}.Log.progress.out"
    File log = "~{sample_data.name}.~{ref_genome_name}.Log.out"
    File sj_out = "~{sample_data.name}.~{ref_genome_name}.SJ.out.tab"
  }

  runtime {
    docker: "getwilds/star:2.7.6a"
    memory: "~{memory_gb} GB"
    cpu: cpu_cores
  }
}
